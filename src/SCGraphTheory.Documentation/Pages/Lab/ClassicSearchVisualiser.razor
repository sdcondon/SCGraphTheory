@page "/lab/classic-search-visualiser"

@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using SCGraphTheory.AdjacencyList;
@using SCGraphTheory.Search.Classic;
@using System.Diagnostics;
@using System.Drawing;
@using WorldGraph = ClassicSearchVisualiser.ALGridGraph<ClassicSearchVisualiser.World.Terrain>;

<PageTitle>Classic Search Visualiser</PageTitle>

<h3>Classic Search Visualiser</h3>

<div class="alert alert-primary" role="alert">
    <p>
        This page is an interactive demonstration of some of the "classic" search algorithms found in the <a href="search">Search</a> package.
        It runs entirely in your browser.
        Notes:
    </p>
    <ul>
        <li>
            It is formulated as a pathfinding problem on a 2D grid. You can change the the start and end points, make changes to the "terrain",
            and specify the search algorithm to be used. The solution path is drawn in red. Other explored edges are drawn in blue.
            Edges on the search frontier (i.e. in the queue/stack for exploration next) at the point at which the search completed are drawn in light grey.
        </li>
        <li>
            The source code for this page can be found <a href="https://github.com/sdcondon/SCGraphTheory/blob/main/src/SCGraphTheory.Documentation/Pages/Lab/ClassicSearchVisualiser.razor">here</a>.
        </li>
    </ul>
</div>

<div class="pb-3">
    <div class="btn-group" role="group" aria-label="Paint Palette">
        @foreach (var item in paintPalette)
        {
            <input type="radio" class="btn-check" name="paint" id="@item.Key" autocomplete="off" checked="@item.Key.Equals(paintPalette.First().Key)" />
            <label class="btn btn-secondary" style="@item.Key.style" for="@item.Key" @onclick="@item.Value">@item.Key.text</label>
        }
    </div>

    <div class="btn-group" role="group" aria-label="Search Palette">
        @foreach (var item in searchPalette)
        {
            <input type="radio" class="btn-check" name="search" id="@item.Key" autocomplete="off" checked="@item.Key.Equals(searchPalette.First().Key)" />
            <label class="btn btn-secondary" for="@item.Key" @onclick="@item.Value">@item.Key</label>
        }
    </div>
</div>

<div @onclick="OnCanvasClick" style="border: 1px solid #000000; background-color: lightgray;">
    <BECanvas Width="300" Height="300" @ref="canvas"></BECanvas>
</div>

@code {
    private readonly World world;
    private readonly Dictionary<(string text, string style), Action> paintPalette;
    private readonly Dictionary<string, Action> searchPalette;

    private WorldRenderer? worldRenderer;
    private Action<int, int>? canvasClickHandler;
    protected BECanvas? canvas;

    public ClassicSearchVisualiser()
    {
        world = new World(20, 20);

        paintPalette = new()
        {
            [("⚑", "color: green")] = () => canvasClickHandler = (x, y) => world.Start = (x, y),
            [("⚑", "color: red")] = () => canvasClickHandler = (x, y) => world.Target = (x, y),
            [("■", "color: white")] = () => canvasClickHandler = (x, y) => world[x, y] = World.Terrain.Floor,
            [("■", "color: royalblue")] = () => canvasClickHandler = (x, y) => world[x, y] = World.Terrain.Water,
            [("■", "color: black")] = () => canvasClickHandler = (x, y) => world[x, y] = World.Terrain.Wall,
        };
        paintPalette.First().Value();

        searchPalette = new()
        {
            ["A*"] = () => world.RecreateSearch = world.MakeAStarSearch,
            ["Dj"] = () => world.RecreateSearch = world.MakeDijkstraSearch,
            ["BF"] = () => world.RecreateSearch = world.MakeBreadthFirstSearch,
            ["DF"] = () => world.RecreateSearch = world.MakeDepthFirstSearch,
        };
        searchPalette.First().Value();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            worldRenderer = new WorldRenderer(world, canvas!, await canvas.CreateCanvas2DAsync());
        }

        await worldRenderer!.RenderAsync();
    }

    private void OnCanvasClick(MouseEventArgs e)
    {
        var cell = worldRenderer!.CanvasToGridCoordinate((int)e.OffsetX, (int)e.OffsetY);
        canvasClickHandler?.Invoke(cell.X, cell.Y);
    }

    /// <summary>
    /// Search visualizer world model.
    /// </summary>
    public class World
    {
        private static readonly Dictionary<Terrain, float> TerrainCosts = new()
        {
            [Terrain.Floor] = 1f,
            [Terrain.Water] = 3f,
        };

        private readonly WorldGraph graph;

        private (int X, int Y) startPosition;
        private (int X, int Y) targetPosition;
        private Action? recreateSearch;

        /// <summary>
        /// Initializes a new instance of the <see cref="World"/> class.
        /// </summary>
        /// <param name="size">The size of the world.</param>
        public World(int sizeX, int sizeY)
        {
            Size = (sizeX, sizeY);
            graph = new WorldGraph(Size, (from, to) => from != Terrain.Wall && to != Terrain.Wall);

            Start = (0, Size.Y / 2);
            Target = (Size.X - 1, Size.Y / 2);
        }

        /// <summary>
        /// An enumeration of possible terrain types.
        /// </summary>
        public enum Terrain
        {
            /// <summary>
            /// Floor - cheap terrain type to travel on.
            /// </summary>
            Floor,

            /// <summary>
            /// Floor - expensive terrain type to travel on.
            /// </summary>
            Water,

            /// <summary>
            /// Wall - impassable terrain.
            /// </summary>
            Wall,
        }

        /// <summary>
        /// Gets the size of the world.
        /// </summary>
        public (int X, int Y) Size { get; }

        /// <summary>
        /// Gets the current search.
        /// </summary>
        public ISearch<WorldGraph.Node, WorldGraph.Edge>? LatestSearch { get; private set; }

        /// <summary>
        /// Gets or sets the current start position.
        /// </summary>
        public (int X, int Y) Start
        {
            get => startPosition;
            set
            {
                if (IsInBounds(value.X, value.Y))
                {
                    startPosition = value;
                    recreateSearch?.Invoke();
                }
            }
        }

        /// <summary>
        /// Gets or sets the current target position.
        /// </summary>
        public (int X, int Y) Target
        {
            get => targetPosition;
            set
            {
                if (IsInBounds(value.X, value.Y))
                {
                    targetPosition = value;
                    recreateSearch?.Invoke();
                }
            }
        }

        /// <summary>
        /// Sets the delegate used to recreate the current search (and invokes it immediately). Invoked whenever some aspect of the world changes.
        /// </summary>
        public Action RecreateSearch
        {
            set
            {
                recreateSearch = value;
                recreateSearch?.Invoke();
            }
        }

        /// <summary>
        /// Gets an index of node values by position.
        /// </summary>
        /// <param name="x">The x-ordinate of the node to retrieve.</param>
        /// <param name="y">The y-ordinate of the node to retrieve.</param>
        public Terrain this[int x, int y]
        {
            get => graph[x, y].Value;
            set
            {
                if (IsInBounds(x, y))
                {
                    graph[x, y].Value = value;
                    recreateSearch?.Invoke();
                }
            }
        }

        /// <summary>
        /// Recreates the active search using the A* algorithm.
        /// </summary>
        public void MakeAStarSearch()
        {
            LatestSearch = new AStarSearch<WorldGraph.Node, WorldGraph.Edge>(
                graph[Start.X, Start.Y],
                t => t.Coordinates == Target,
                EuclideanEdgeCost,
                n => ManhattanDistance(n.Coordinates, Target));
            LatestSearch.Complete();
        }

        /// <summary>
        /// Recreates the active search using Dijkstra's algorithm.
        /// </summary>
        public void MakeDijkstraSearch()
        {
            LatestSearch = new DijkstraSearch<WorldGraph.Node, WorldGraph.Edge>(
                graph[Start.X, Start.Y],
                t => t.Coordinates == Target,
                EuclideanEdgeCost);
            LatestSearch.Complete();
        }

        /// <summary>
        /// Recreates the active search using the breadth-first algorithm.
        /// </summary>
        public void MakeBreadthFirstSearch()
        {
            LatestSearch = new BreadthFirstSearch<WorldGraph.Node, WorldGraph.Edge>(
                graph[Start.X, Start.Y],
                t => t.Coordinates == Target);
            LatestSearch.Complete();
        }

        /// <summary>
        /// Recreates the active search using the depth-first algorithm.
        /// </summary>
        public void MakeDepthFirstSearch()
        {
            LatestSearch = new DepthFirstSearch<WorldGraph.Node, WorldGraph.Edge>(
                graph[Start.X, Start.Y],
                t => t.Coordinates == Target);
            LatestSearch.Complete();
        }

        private bool IsInBounds(int x, int y)
        {
            return x >= 0 && x < Size.X && y >= 0 && y < Size.Y;
        }

        private static float EuclideanDistance((int X, int Y) a, (int X, int Y) b)
        {
            return (float)Math.Sqrt((a.X - b.X) * (a.X - b.X) + (a.Y - b.Y) * (a.Y - b.Y));
        }

        private static float ManhattanDistance((int X, int Y) a, (int X, int Y) b)
        {
            return Math.Abs(a.X - b.X) + Math.Abs(a.Y - b.Y);
        }

        private static float EuclideanEdgeCost(WorldGraph.Edge edge)
        {
            return EuclideanDistance(edge.From.Coordinates, edge.To.Coordinates) * 0.5f * (TerrainCosts[edge.From.Value] + TerrainCosts[edge.To.Value]);
        }
    }

    /// <summary>
    /// Search visualizer world rendering logic.
    /// </summary>
    private class WorldRenderer
    {
        private static readonly Dictionary<World.Terrain, string> fillStyles = new()
        {
            [World.Terrain.Floor] = "white",
            [World.Terrain.Water] = "royalblue",
            [World.Terrain.Wall] = "black",
        };

        private readonly World world;
        private readonly Canvas2DContext context;
        private readonly int tileSize;

        public WorldRenderer(World world, BECanvas canvas, Canvas2DContext context)
        {
            this.world = world;
            this.context = context;

            // nb: for now at least, no handling of canvas size changes..
            var maxTileSizeX = canvas.Width / world.Size.X;
            var maxTileSizeY = canvas.Height / world.Size.Y;
            this.tileSize = (int)Math.Min(maxTileSizeX, maxTileSizeY);
        }

        public async Task RenderAsync()
        {
            await context.BeginBatchAsync();

            // Render terrain
            for (int x = 0; x < world.Size.X; x++)
            {
                for (int y = 0; y < world.Size.Y; y++)
                {
                    await context.SetFillStyleAsync(fillStyles[this.world[x, y]]);
                    await context.FillRectAsync(x * tileSize, y * tileSize, tileSize, tileSize);
                }
            }

            // Render latest search if there is one
            if (this.world.LatestSearch != null)
            {
                // Render visited edges
                foreach (var v in this.world.LatestSearch.Visited.Values)
                {
                    if (!Equals(v.Edge, default))
                    {
                        await DrawGraphEdgeAsync(v.Edge, v.IsOnFrontier ? "lightgray" : "blue");
                    }
                }

                // Render path to target
                if (!Equals(this.world.LatestSearch.Target, default))
                {
                    foreach (var edge in this.world.LatestSearch.PathToTarget())
                    {
                        await DrawGraphEdgeAsync(edge, "red");
                    }
                }
            }

            // Render start & target
            await DrawCircleAsync(world.Start, 0.75, "green");
            await DrawCircleAsync(world.Target, 0.75, "red");

            await context.EndBatchAsync();
        }

        public (int X, int Y) CanvasToGridCoordinate(int x, int y)
        {
            var gridX = x / tileSize;
            var gridY = y / tileSize;
            return (gridX, gridY);
        }

        public (int X, int Y) GridToCanvasCoordinate(int x, int y, double xOffset = 0.0, double yOffset = 0.0)
        {
            var canvasX = (x * tileSize) + (int)(tileSize * (xOffset + 0.5));
            var canvasY = (y * tileSize) + (int)(tileSize * (yOffset + 0.5));
            return (canvasX, canvasY);
        }

        private async Task DrawGraphEdgeAsync(WorldGraph.Edge edge, string colour)
        {
            await context.BeginPathAsync();
            await context.SetStrokeStyleAsync(colour);
            var from = GridToCanvasCoordinate(edge.From.Coordinates.X, edge.From.Coordinates.Y);
            await context.MoveToAsync(from.X, from.Y);
            var to = GridToCanvasCoordinate(edge.To.Coordinates.X, edge.To.Coordinates.Y);
            await context.LineToAsync(to.X, to.Y);
            await context.StrokeAsync();
        }

        private async Task DrawCircleAsync((int X, int Y) gridCoordinate, double diameterInTiles, string colour)
        {
            await context.BeginPathAsync();
            var centre = GridToCanvasCoordinate(gridCoordinate.X, gridCoordinate.Y);
            await context.ArcAsync(centre.X, centre.Y, diameterInTiles * tileSize / 2, 0, 2 * Math.PI);
            await context.SetFillStyleAsync(colour);
            await context.FillAsync();
        }
    }

    /// <summary>
    /// Graph implementation that wraps a <see cref="SCGraphTheory.AdjacencyList.Graph{TNode, TEdge}"/> and represents a square grid of values, using a delegate to determine which adjacencies are navigable.
    /// </summary>
    /// <typeparam name="T">The type of value associated with each node.</typeparam>
    public class ALGridGraph<T> : IGraph<ALGridGraph<T>.Node, ALGridGraph<T>.Edge>
    {
        private readonly Graph<Node, Edge> innerGraph;
        private readonly Node[,] nodeIndex;
        private readonly Func<T, T, bool> adjacencyIsNavigable;

        /// <summary>
        /// Initializes a new instance of the <see cref="ALGridGraph{T}"/> class initialized with the default value for each node.
        /// </summary>
        /// <param name="size">The size of the grid.</param>
        /// <param name="adjacencyIsNavigable">A predicate to determine whether a given adjacency is navigable (i.e. a given edge exists), based on the value of the adjacent nodes.</param>
        public ALGridGraph((int X, int Y) size, Func<T, T, bool> adjacencyIsNavigable)
        {
            innerGraph = new Graph<Node, Edge>();
            nodeIndex = new Node[size.X, size.Y];
            for (int x = 0; x < size.X; x++)
            {
                for (int y = 0; y < size.Y; y++)
                {
                    innerGraph.Add(nodeIndex[x, y] = new Node(this, (x, y), default));
                }
            }

            this.adjacencyIsNavigable = adjacencyIsNavigable;

            for (int x = 0; x < size.X; x++)
            {
                for (int y = 0; y < size.Y; y++)
                {
                    SetNodeEdges(x, y);
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ALGridGraph{T}"/> class initialized with the default value for each node, and with all adjacencies navigable.
        /// </summary>
        /// <param name="size">The size of the grid.</param>
        public ALGridGraph((int X, int Y) size)
            : this(size, (_, _) => true)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ALGridGraph{T}"/> class.
        /// </summary>
        /// <param name="values">The node values for the grid.</param>
        /// <param name="adjacencyIsNavigable">A predicate to determine whether a given adjacency is navigable (i.e. a given edge exists), based on the value of the adjacent nodes.</param>
        public ALGridGraph(T[,] values, Func<T, T, bool> adjacencyIsNavigable)
            : this((values.GetLength(0), values.GetLength(1)), adjacencyIsNavigable)
        {
            for (int x = 0; x < values.GetLength(0); x++)
            {
                for (int y = 0; y < values.GetLength(1); y++)
                {
                    this[x, y].Value = values[x, y];
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ALGridGraph{T}"/> class with all adjacencies navigable.
        /// </summary>
        /// <param name="values">The node values for the grid.</param>
        public ALGridGraph(T[,] values)
            : this(values, (_, _) => true)
        {
        }

        /// <inheritdoc />
        public IEnumerable<Node> Nodes => innerGraph.Nodes;

        /// <inheritdoc />
        public IEnumerable<Edge> Edges => innerGraph.Edges;

        /// <summary>
        /// Indexer of nodes in the graph.
        /// </summary>
        /// <param name="x">The x-ordinate of the node to retrieve.</param>
        /// <param name="y">The y-ordinate of the node to retrieve.</param>
        /// <returns>The graph node with the given coordinates.</returns>
        public Node this[int x, int y] => nodeIndex[x, y];

        private void SetNodeEdges(int x, int y)
        {
            var fromNode = nodeIndex[x, y];

            for (int dx = -1; dx <= 1; dx++)
            {
                if (nodeIndex.GetLowerBound(0) <= x + dx && x + dx <= nodeIndex.GetUpperBound(0))
                {
                    for (int dy = -1; dy <= 1; dy++)
                    {
                        if ((dx != 0 || dy != 0) && nodeIndex.GetLowerBound(1) <= y + dy && y + dy <= nodeIndex.GetUpperBound(1))
                        {
                            var toNode = nodeIndex[x + dx, y + dy];
                            var existingEdge = fromNode.Edges.SingleOrDefault(e => e.To.Equals(toNode));
                            var edgeShouldExist = adjacencyIsNavigable(fromNode.Value, toNode.Value);

                            if (edgeShouldExist && existingEdge == null)
                            {
                                innerGraph.Add(new Edge(fromNode, toNode));
                            }
                            else if (!edgeShouldExist && existingEdge != null)
                            {
                                innerGraph.Remove(existingEdge);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Node class for <see cref="ALGridGraph{T}"/>.
        /// </summary>
        public class Node : NodeBase<Node, Edge>
        {
            private readonly ALGridGraph<T> graph;
            private T value;

            /// <summary>
            /// Initializes a new instance of the <see cref="Node"/> class.
            /// </summary>
            /// <param name="graph">The graph that the node lies within.</param>
            /// <param name="coordinates">The coordinates of the node.</param>
            /// <param name="value">The vaue of the node.</param>
            internal Node(ALGridGraph<T> graph, (int X, int Y) coordinates, T value) => (this.graph, Coordinates, this.value) = (graph, coordinates, value);

            /// <summary>
            /// Gets the coordinates of the node.
            /// </summary>
            public (int X, int Y) Coordinates { get; }

            /// <summary>
            /// Gets or sets the value of the node.
            /// </summary>
            public T Value
            {
                get => value;
                set
                {
                    this.value = value;
                    graph.SetNodeEdges(this.Coordinates.X, this.Coordinates.Y);
                }
            }
        }

        /// <summary>
        /// Edge class for <see cref="ALGridGraph{T}"/>.
        /// </summary>
        public class Edge : UndirectedEdgeBase<Node, Edge>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="Edge"/> class.
            /// </summary>
            /// <param name="from">The node that the edge connects from.</param>
            /// <param name="to">The node that the edge connects to.</param>
            internal Edge(Node from, Node to)
                : base(from, to, (f, t, r) => new Edge(f, t, r))
            {
            }

            private Edge(Node from, Node to, Edge reverse)
                : base(from, to, reverse)
            {
            }
        }
    }
}